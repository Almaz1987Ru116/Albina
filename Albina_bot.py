import aiogram as ag
import asyncio
import logging
from aiogram import Bot,Dispatcher,types,F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State,StatesGroup
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
token=("6409599873:AAEQXLsReZYKFXjJIeMYFeKmEh9fwKMTySk")
bot=Bot(token=token)
dp=Dispatcher()
logging.basicConfig(level=logging.INFO)

class States(StatesGroup):
    calc=State()
    pol=State()
    vozrast=State()
    rost=State()
    ves=State()
    obraz_zhizny=State()
    cel=State()
    nabor_pohudenie=State()
    k_p=State()
    max_v=State()
    voda=State()
    puls=State()

@dp.message(Command("start"))
async def start(message:types.Message):
    btnlist=[[types.KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),types.KeyboardButton(text="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")]]
    keyboard=ReplyKeyboardMarkup(keyboard=btnlist,resize_keyboard=True)
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", reply_markup=keyboard)

def get_kb():
    kb = [
            [types.InlineKeyboardButton(text="–ì—Ä—É–¥—å", callback_data="grud")],
            [types.InlineKeyboardButton(text="–°–ø–∏–Ω–∞", callback_data="spina")],
            [types.InlineKeyboardButton(text="–ü—Ä–µ—Å—Å", callback_data="press")],
            [types.InlineKeyboardButton(text="–ù–æ–≥–∏", callback_data="nogi")],
            [types.InlineKeyboardButton(text="–Ø–≥–æ–¥–∏—Ü—ã", callback_data="popa")],
            [types.InlineKeyboardButton(text="–†—É–∫–∏", callback_data="ruki")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    return builder

@dp.message(StateFilter(None),F.text)
async def msg(message:types.Message, state:FSMContext):
    if message.text.lower()=="–ø—Ä–∏–≤–µ—Ç":
        await message.answer(text="–ü—Ä–∏–≤–µ—Ç!")
    if message.text=="–ö–∞–∫ –¥–µ–ª–∞?":
        await message.answer(text="–£–∂–∞—Å–Ω–æ, –∑–∞–º—É—á–∏–ª–∏ –∫–∞–ø—Ä–∏–∑–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!")
    if message.text=="–Ø —Ö–æ—á—É —Å–µ–≥–æ–¥–Ω—è –≤—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        await message.answer(text="–°–¥–µ–ª–∞–π –ª–∏—Ü–æ –ø–æ–ø—Ä–æ—â–µ —Å–µ–ª–µ–¥–∫–∞,—Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç —Ä–∞—Å—Ç—è–∂–∫–∞")
    if message.text=="–£ –º–µ–Ω—è –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        await message.answer(text="–ù–ï –≥—Ä—É—Å—Ç–∏, –Ω–µ—Ç–æ —Å–∏—Å—å–∫–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞—Å—Ç–∏")
    if message.text=="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        await message.answer(text="–≠—Ç–æ –º–æ–∏ —á—Ç–æ–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?")
    if message.text=="–£ –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è":
        await message.answer(text="–ù–µ—á–µ–≥–æ ,–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞,–ø–æ–ª—É—á–∏—Ç—Å—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ.–ù–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è,–∑–Ω–∞—á–∏—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞")
    if message.text=="–Ø —É—Å—Ç–∞–ª":
        await message.answer(text="–í—Ç—è–Ω–∏ –∂–∏–≤–æ—Ç –∏ –≤—ã–ø—Ä—è–º–∏ —Å–ø–∏–Ω—É! –ß–µ–≥–æ —Ç—Ä—è—Å–µ—à—å—Å—è –∫–∞–∫ —Å–æ—Å–∏—Å–∫–∞!")
    if message.text=="–ß—Ç–æ –±—É–¥–µ–º —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞—Ç—å":
        await message.answer(text="–¢–æ —á—Ç–æ —è —Å–∫–∞–∂—É")
    if message.text=="–Ø —Ö–æ—á—É –Ω–∞–∫–∞—á–∞—Ç—å —Ä—É–∫–∏" or message.text == "–Ø —Ö–æ—á—É –Ω–∞–∫–∞—á–∞—Ç—å –≥—Ä—É–¥—å" or message.text == "–Ø —Ö–æ—á—É –Ω–∞–∫–∞—á–∞—Ç—å —Å–ø–∏–Ω—É" or message.text == "–Ø —Ö–æ—á—É –Ω–∞–∫–∞—á–∞—Ç—å –ø–ª–µ—á–∏" or message.text == "–Ø —Ö–æ—á—É –Ω–∞–∫–∞—á–∞—Ç—å –Ω–æ–≥–∏":
        await message.answer(text="–ù–µ—Ç,—Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å —á–µ–≥–æ —Ö–æ—á–µ—à—å,—è –ª—É—á—à–µ –∑–Ω–∞—é —á—Ç–æ —Ç–µ–±–µ –Ω–∞–¥–æ")
    if message.text == "–Ø —Ö–æ—á—É –Ω–∞–∫–∞—á–∞—Ç—å —è–≥–æ–¥–∏—Ü—ã":
        await message.answer(text="–ù—É —Ç–æ–≥–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–Ω–∏–º–∏ —Å–≤–æ—é —Ç–æ—â—É—é –∂–æ–ø—É —Å –¥–∏–≤–∞–Ω–∞!")
    if message.text == "–Ø —Ö–æ—á—É —É–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç":
        await message.answer(text="–ù—É —Ç–æ–≥–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–Ω–∏–º–∏ —Å–≤–æ—é –∂–∏—Ä–Ω—É—é –∂–æ–ø—É —Å –¥–∏–≤–∞–Ω–∞!")
    if message.text=="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        btnlist = [
                    [types.KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ö–ë–ñ–£"),types.KeyboardButton(text="–†–∞–±–æ—á–∏–π –≤–µ—Å"),],
                    [types.KeyboardButton(text="–ü—É–ª—å—Å"),types.KeyboardButton(text="–†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–π –≤–æ–¥—ã")],
                    [types.KeyboardButton(text="–í—ã–π—Ç–∏")]
                  ]
        keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",reply_markup=keyboard)
        await state.set_state(States.calc)
    if message.text=="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        await message.answer(text="–ß—Ç–æ –±—É–¥–µ–º –∫–∞—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?üòâ", reply_markup=get_kb())

@dp.callback_query(F.data=="grud")
async def grud(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ", callback_data="g_ex_1")],
            [types.InlineKeyboardButton(text="–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ", callback_data="g_ex_2")],
            [types.InlineKeyboardButton(text="–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª–µ–∂–∞", callback_data="g_ex_3")],
            [types.InlineKeyboardButton(text="–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏", callback_data="g_ex_4")],
            [types.InlineKeyboardButton(text="–°–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫ –Ω–∞ –Ω–∏–∂–Ω–µ–º –±–ª–æ–∫–µ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞", callback_data="g_ex_5")],
            [types.InlineKeyboardButton(text="–°–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –±–∞–±–æ—á–∫–∞", callback_data="g_ex_6")],
            [types.InlineKeyboardButton(text="–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö", callback_data="g_ex_7")],
            [types.InlineKeyboardButton(text="–•–∞–º–º–µ—Ä", callback_data="g_ex_8")],
            [types.InlineKeyboardButton(text="–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π", callback_data="g_ex_9")],
            [types.InlineKeyboardButton(text="–ñ–∏–º —à—Ç–∞–Ω–≥–∏ —Å–∏–¥—è –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –°–º–∏—Ç–∞", callback_data="g_ex_10")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back2ex")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–¥—å", reply_markup=builder)
    await callback.answer()

@dp.callback_query(F.data=="spina")
async def spina(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ", callback_data="s_ex_1")],
            [types.InlineKeyboardButton(text="–ê–≤—Å—Ç—Ä–∏–π—Å–∫–æ–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ", callback_data="s_ex_2")],
            [types.InlineKeyboardButton(text="–¢—è–≥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞", callback_data="s_ex_3")],
            [types.InlineKeyboardButton(text="–ì—Ä–∞–≤–∏—Ç—Ä–æ–Ω", callback_data="s_ex_4")],
            [types.InlineKeyboardButton(text="–¢—è–≥–∞ –∫ –ø–æ–¥–±–æ—Ä–æ–¥–∫—É", callback_data="s_ex_5")],
            [types.InlineKeyboardButton(text="–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –æ–¥–Ω–æ–π —Ä—É–∫–æ–π –Ω–∞ —Å–∫–∞–º—å–µ", callback_data="s_ex_6")],
            [types.InlineKeyboardButton(text="–¢—è–≥–∞ –¢-–≥—Ä–∏—Ñ–∞ —Å —É–ø–æ—Ä–æ–º –Ω–∞ —Å–∫–∞–º—å—é", callback_data="s_ex_7")],
            [types.InlineKeyboardButton(text="–ì–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è", callback_data="s_ex_8")],
            [types.InlineKeyboardButton(text="–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ", callback_data="s_ex_9")],
            [types.InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞", callback_data="s_ex_10")],
            [types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω—ã–µ –º–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ –ª–µ–∂–∞", callback_data="s_ex_11")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back2ex")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Å–ø–∏–Ω—É", reply_markup=builder)  
    await callback.answer()  

@dp.callback_query(F.data=="nogi")
async def nogi(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ —Å–æ —à—Ç–∞–Ω–≥–æ–π –Ω–∞ —Å–ø–∏–Ω–µ", callback_data="n_ex_1")],
            [types.InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ —Å–æ —à—Ç–∞–Ω–≥–æ–π –Ω–∞ –≥—Ä—É–¥–∏", callback_data="n_ex_2")],
            [types.InlineKeyboardButton(text="–í—ã–ø–∞–¥—ã", callback_data="n_ex_3")],
            [types.InlineKeyboardButton(text="–ñ–∏–º –Ω–æ–≥–∞–º–∏ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ", callback_data="n_ex_4")],
            [types.InlineKeyboardButton(text="–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø—Ä–∏—Å–µ–¥", callback_data="n_ex_5")],
            [types.InlineKeyboardButton(text="–°–≤–µ–¥–µ–Ω–∏–µ / —Ä–∞–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ", callback_data="n_ex_6")],
            [types.InlineKeyboardButton(text="–ü–æ–¥—ä–µ–º –Ω–∞ –Ω–æ—Å–∫–∏ —Å—Ç–æ—è", callback_data="n_ex_7")],
            [types.InlineKeyboardButton(text="–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥", callback_data="n_ex_8")],
            [types.InlineKeyboardButton(text="–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥", callback_data="n_ex_9")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back2ex")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –Ω–æ–≥–∏", reply_markup=builder)  
    await callback.answer()      

@dp.callback_query(F.data=="popa")
async def popa(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–ü–æ–¥—ä–µ–º —Ç–∞–∑–∞ —Å –æ–ø–æ—Ä–æ–π –Ω–∞ –ª–∞–≤–∫—É", callback_data="pp_ex_1")],
            [types.InlineKeyboardButton(text="–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç —Å –≤–µ—Å–æ–º", callback_data="pp_ex_2")],
            [types.InlineKeyboardButton(text="–¢—è–≥–∞ –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ –º–µ–∂–¥—É –Ω–æ–≥", callback_data="pp_ex_3")],
            [types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–µ –º–∞—Ö–∏ –≥–∏—Ä–µ–π", callback_data="pp_ex_4")],
            [types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è –≥–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è", callback_data="pp_ex_5")],
            [types.InlineKeyboardButton(text="–û—Ç–≤–µ–¥–µ–Ω–∏–µ –±–µ–¥—Ä–∞ –Ω–∞–∑–∞–¥ –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ", callback_data="pp_ex_6")],
            [types.InlineKeyboardButton(text="–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π", callback_data="pp_ex_7")],
            [types.InlineKeyboardButton(text="–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞", callback_data="pp_ex_8")],
            [types.InlineKeyboardButton(text="–í—ã–ø–∞–¥—ã", callback_data="pp_ex_9")],
            [types.InlineKeyboardButton(text="–ñ–∏–º –Ω–æ–≥–∞–º–∏ –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ", callback_data="pp_ex_10")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back2ex")]
        ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —è–≥–æ–¥–∏—Ü—ã", reply_markup=builder)  
    await callback.answer()

@dp.callback_query(F.data=="ruki")
async def ruki(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–ü–ª–µ—á–∏", callback_data="shoulders")],
            [types.InlineKeyboardButton(text="–ë–∏—Ü–µ–ø—Å", callback_data="biceps")],
            [types.InlineKeyboardButton(text="–¢—Ä–∏—Ü–µ–ø—Å", callback_data="triceps")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back2ex")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=builder)  
    await callback.answer()

@dp.callback_query(F.data=="biceps")
async def press(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–ü–æ–¥—ä–µ–º w –æ–±—Ä–∞–∑–Ω–æ–π —à—Ç–∞–Ω–≥–∏", callback_data="b_ex_1")],
            [types.InlineKeyboardButton(text="–ü–æ–¥—å–µ–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è –Ω–∞ –º–Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ", callback_data="b_ex_2")],
            [types.InlineKeyboardButton(text="–ú–æ–ª–æ—Ç", callback_data="b_ex_3")],
            [types.InlineKeyboardButton(text="–ü–æ–¥—ä–µ–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å —Å—Ç–æ—è", callback_data="b_ex_4")],
            [types.InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ –≤ –±–∏—Ü–µ–ø—Å –º–∞—à–∏–Ω–µ", callback_data="b_ex_5")],
            [types.InlineKeyboardButton(text="–°–≥–∏–±–∞–Ω–∏–µ –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ", callback_data="b_ex_6")],
            [types.InlineKeyboardButton(text="–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º", callback_data="b_ex_7")],
            [types.InlineKeyboardButton(text="–®—Ç–∞–Ω–≥–∞ —Ö–≤–∞—Ç–æ–º —Å–≤–µ—Ä—Ö—É", callback_data="b_ex_8")],
            [types.InlineKeyboardButton(text="–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≥–∏–±–∞–Ω–∏—è", callback_data="b_ex_9")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="ruki")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –±–∏—Ü–µ–ø—Å", reply_markup=builder)  
    await callback.answer()


@dp.callback_query(F.data=="triceps")
async def press(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ", callback_data="t_ex1")],
            [types.InlineKeyboardButton(text="–ë—Ä—É—Å—å—è", callback_data="t_ex2")],
            [types.InlineKeyboardButton(text="–û—Ç–∂–∏–º–∞–Ω–∏—è", callback_data="t_ex3")],
            [types.InlineKeyboardButton(text="–§—Ä–∞–Ω—Ü—É–∑–∫–∏–π –∂–∏–º", callback_data="t_ex4")],
            [types.InlineKeyboardButton(text="–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–∏ –∏–∑-–∑–∞ –≥–æ–ª–æ–≤—ã", callback_data="t_ex5")],
            [types.InlineKeyboardButton(text="–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–µ —Å –∫–∞–Ω–∞—Ç–Ω–æ–π —Ä—É—á–∫–æ–π", callback_data="t_ex6")],
            [types.InlineKeyboardButton(text="–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–µ –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º", callback_data="t_ex7")],
            [types.InlineKeyboardButton(text="–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–µ –∏–∑-–∑–∞ –≥–æ–ª–æ–≤—ã", callback_data="t_ex8")],
            [types.InlineKeyboardButton(text="–ñ–∏–º —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º", callback_data="t_ex9")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="ruki")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —Ç—Ä–∏—Ü–µ–ø—Å", reply_markup=builder)  
    await callback.answer()


@dp.callback_query(F.data=="shoulders")
async def press(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –≤–≤–µ—Ä—Ö —Å—Ç–æ—è", callback_data="sh_ex1")],
            [types.InlineKeyboardButton(text="–ñ–∏–º —à—Ç–∞–Ω–≥–∏ —Å –≥—Ä—É–¥–∏ —Å—Ç–æ—è", callback_data="sh_ex2")],
            [types.InlineKeyboardButton(text="–†–∞–∑–≤–æ–¥—ã –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω—ã —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º", callback_data="sh_ex3")],
            [types.InlineKeyboardButton(text="–†–∞–∑–≤–æ–¥—ã –≥–∞–Ω—Ç–µ–ª–µ–π –≤ –Ω–∞–∫–ª–æ–Ω–µ —Å–∏–¥—è", callback_data="sh_ex4")],
            [types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è –±–∞–±–æ—á–∫–∞", callback_data="sh_ex5")],
            [types.InlineKeyboardButton(text="–¢—è–≥–∞ –∫ –ø–æ–¥–±–æ—Ä–æ–¥–∫—É", callback_data="sh_ex6")],
            [types.InlineKeyboardButton(text="–ë–∞–±–æ—á–∫–∞ –Ω–∞–∑–∞–¥", callback_data="sh_ex7")],
            [types.InlineKeyboardButton(text="–ü–æ–¥—å–µ–º –±–ª–∏–Ω–∞ —Å –≤—Ä–∞—â–µ–Ω–∏–µ–º", callback_data="sh_ex8")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="ruki")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø–ª–µ—á–∏", reply_markup=builder)  
    await callback.answer()

@dp.callback_query(F.data=="press")
async def press(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(text="–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", callback_data="p_ex_1")],
            [types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", callback_data="p_ex_2")],
            [types.InlineKeyboardButton(text="–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ", callback_data="p_ex_3")],
            [types.InlineKeyboardButton(text="–ö–æ—Å—ã–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –∫ –ø—Ä—è–º–æ–π –Ω–æ–≥–µ", callback_data="p_ex_4")],
            [types.InlineKeyboardButton(text="–ü–æ–¥—ä–µ–º –∫–æ—Ä–ø—É—Å–∞", callback_data="p_ex_5")],
            [types.InlineKeyboardButton(text="–¢–≤–∏—Å—Ç —Å –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è", callback_data="p_ex_6")],
            [types.InlineKeyboardButton(text="–°–∫–ª–∞–¥–∫–∞", callback_data="p_ex_7")],
            [types.InlineKeyboardButton(text="–°–∫–ª–∞–¥–∫–∞ '–Ω–æ–∂'", callback_data="p_ex_8")],
            [types.InlineKeyboardButton(text="–ù–æ–∂–Ω–∏—Ü—ã", callback_data="p_ex_9")],
            [types.InlineKeyboardButton(text="–í–µ–ª–æ—Å–∏–ø–µ–¥", callback_data="p_ex_10")],
            [types.InlineKeyboardButton(text="–ü–ª–∞–Ω–∫–∞ / –ø–ª–∞–Ω–∫–∞ –Ω–∞ –≤—ã—Ç—è–Ω—É—Ç—ã—Ö —Ä—É–∫–∞—Ö", callback_data="p_ex_11")],
            [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back2ex")]
         ]
    builder=types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_text("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ—Å—Å", reply_markup=builder)  
    await callback.answer() 

@dp.callback_query(F.data=="back2ex")
async def back2ex(callback: types.CallbackQuery):
        await callback.message.edit_text("–ß—Ç–æ –±—É–¥–µ–º –∫–∞—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?üòâ", reply_markup=get_kb())
        await callback.answer() 


@dp.message(StateFilter(States.calc),F.text)
async def clc(message:types.Message, state:FSMContext):
    if message.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ö–ë–ñ–£":
        btnlist = [
                    [types.KeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")],
                    [types.KeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ")],
                    [types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã")]
                  ]
        keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å",reply_markup=keyboard)
        await state.set_state(States.nabor_pohudenie)
    if message.text=="–†–∞–±–æ—á–∏–π –≤–µ—Å":
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
        await state.set_state(States.k_p)
    if message.text=="–†–∞—Å—á–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—è–µ–º–æ–π –≤–æ–¥—ã":
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å")
        await state.set_state(States.voda)
    if message.text=="–ü—É–ª—å—Å":
        await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç")
        await state.set_state(States.puls)
    if message.text == "–í—ã–π—Ç–∏":
        btnlist = [
                    [types.KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
                     types.KeyboardButton(text="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")]
                  ]
        keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
        await message.answer(text="–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=keyboard)
        await state.clear()

@dp.message(StateFilter(States.voda),F.text)
async def voda(message:types.Message, state:FSMContext):
    await message.answer(text=f"–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã: {int(message.text)*30/1000} –ª.")
    await state.clear()

@dp.message(StateFilter(States.k_p),F.text)
async def k_p(message:types.Message, state:FSMContext):
    await state.update_data(k_p=message.text)
    await message.answer(text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å")
    await state.set_state(States.max_v)

@dp.message(StateFilter(States.max_v),F.text)
async def max_v(message:types.Message, state:FSMContext):
    btnlist = [
                [types.KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
                 types.KeyboardButton(text="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")]
              ]
    keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
    data=await state.get_data()
    c_p=data["k_p"]
    await message.answer(text=f"–†–∞–±–æ—á–∏–π –≤–µ—Å: {int((1.0278-(0.0278*int(c_p))*int(message.text)*-1))} –∫–≥.", reply_markup=keyboard)
    await state.clear()

@dp.message(StateFilter(States.nabor_pohudenie),F.text)
async def n_b(message:types.Message, state:FSMContext):
    btnlist = [
                [types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"),
                 types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]
              ]
    keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
    await state.update_data(naborpohud=message.text)
    print(message.text)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",reply_markup=keyboard)
    await state.set_state(States.pol)

@dp.message(StateFilter(States.pol),F.text)
async def pol(message:types.Message, state:FSMContext):
    await state.update_data(pol=message.text)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    await state.set_state(States.vozrast)

@dp.message(StateFilter(States.vozrast),F.text)
async def vozrast(message:types.Message, state:FSMContext):
    await state.update_data(vozrast=message.text)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç")
    await state.set_state(States.rost)

@dp.message(StateFilter(States.puls),F.text)
async def puls(message:types.Message, state:FSMContext):
    btnlist = [
                [types.KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
                 types.KeyboardButton(text="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")]
              ]
    keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
    max_puls=220-int(message.text)
    ozdorov=int(max_puls*0.57)
    fitnes=int(max_puls*0.63)
    aerob=int(max_puls*0.76)
    anaaerob=int(max_puls*0.95)
    await message.answer(text=f'''–û–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è - –ø—É–ª—å—Å –¥–æ {ozdorov}
–≠—Ç–∞ –ø—É–ª—å—Å–æ–≤–∞—è –∑–æ–Ω–∞ –æ–±—ã—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—à–µ–π –ø—Ä–æ–≥—É–ª–∫–µ –∏–ª–∏ –Ω–µ—Å–ø–µ—à–Ω–æ–π –µ–∑–¥–µ –Ω–∞¬†–≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –ø–æ¬†—Ä–∞–≤–Ω–∏–Ω–Ω–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏. 
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤¬†—ç—Ç–æ–π –∑–æ–Ω–µ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞ –ø–æ–ª–µ–∑–Ω—ã –ø—Ä–∏¬†–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–ª–µ –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
                         
–§–∏—Ç–Ω–µ—Å –∑–æ–Ω–∞ - –ø—É–ª—å—Å –æ—Ç {ozdorov} –¥–æ {fitnes}
–ó–∞–Ω—è—Ç–∏—è –≤¬†—ç—Ç–æ–π –∑–æ–Ω–µ –Ω–µ¬†–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã –∏¬†–Ω–µ¬†–æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã –¥–ª—è¬†—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–µ—Ä–¥—Ü–∞ –∏¬†–¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞. –ó–∞—Ç–æ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ ¬´–∫–æ—Ä–∏–¥–æ—Ä–∞¬ª —É–∂–µ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ—Ä—è—Ç—å –ª–∏—à–Ω–∏–π –≤–µ—Å. –û–±—ã—á–Ω–æ –¥–æ–±–∏—Ç—å—Å—è —Ç–∞–∫–æ–≥–æ –ø—É–ª—å—Å–∞ –º–æ–∂–Ω–æ –ø—Ä–∏¬†—Ö–æ–¥—å–±–µ –≤¬†–±—ã—Å—Ç—Ä–æ–º —Ç–µ–º–ø–µ.

–ê—ç—Ä–æ–±–Ω–∞—è –∑–æ–Ω–∞ - –ø—É–ª—å—Å –æ—Ç {fitnes} –¥–æ {aerob} 
–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤¬†—ç—Ç–æ–π –∑–æ–Ω–µ –±–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã, –≤–æ¬†–≤—Ä–µ–º—è –Ω–∏—Ö —É–∂–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç—è–∂–µ–ª–µ–µ –¥—ã—à–∞—Ç—å. –¢–∞–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ–¥–æ–π–¥—É—Ç –Ω–æ–≤–∏—á–∫–∞–º, –∞¬†–Ω–∞–≥—Ä—É–∑–∫—É –º–æ–∂–Ω–æ –≤—ã–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤¬†—Ç–µ—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –∑–∞¬†—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è¬†—Å–∂–∏–≥–∞–Ω–∏—è –∂–∏—Ä–∞. –ü—Ä–∏–º–µ—Ä—ã —Ç–∞–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏¬†‚Äî –±—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞ –∏¬†–ª–µ–≥–∫–∏–π –±–µ–≥.

–ê–Ω–∞—ç—Ä–æ–±–Ω–∞—è –∑–æ–Ω–∞ - –ø—É–ª—å—Å –æ—Ç {aerob} –¥–æ {anaaerob}
–≠—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏, –ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è¬†—Ä–∞–∑–≤–∏—Ç–∏—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –∏¬†–ø–æ—Ç–µ—Ä–∏ –≤–µ—Å–∞ —É¬†–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –Ω–∞¬†—Ç–∞–∫–æ–º –ø—É–ª—å—Å–µ –ø—Ä–æ–≤–æ–¥—è—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –∏¬†–∫—Ä—É–≥–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∏—Ç—å—Å—è —Ç–∞–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—É–ª—å—Å–∞ –º–æ–∂–Ω–æ –ø—Ä–∏¬†—Å–ø—Ä–∏–Ω—Ç–µ –∏–ª–∏ –±—ã—Å—Ç—Ä–æ–π –µ–∑–¥–µ –Ω–∞¬†–≤–µ–ª–æ—Å–∏–ø–µ–¥–µ. –ü—Ä–∏¬†—ç—Ç–æ–º –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –≠–ö–ì –∏¬†–ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å¬†–≤—Ä–∞—á–æ–º-–∫–∞—Ä–¥–∏–æ–ª–æ–≥–æ–º –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫¬†–∑–∞–Ω—è—Ç–∏—è–º –≤¬†—ç—Ç–æ–π –ø—É–ª—å—Å–æ–≤–æ–π –∑–æ–Ω–µ.

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –ø—É–ª—å—Å –æ—Ç {anaaerob} –¥–æ {max_puls}
–ù–µ–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –ª—é–¥—è–º –∏¬†—Ç–µ–º, —É¬†–∫–æ–≥–æ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç¬†–≤—Ä–∞—á–∞, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤¬†—ç—Ç–æ–π –∑–æ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ¬†—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã¬†–∂–µ –ø—Ä–æ–≤–æ–¥—è—Ç –≤¬†—ç—Ç–æ–π –ø—É–ª—å—Å–æ–≤–æ–π –∑–æ–Ω–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏¬†–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
''',reply_markup=keyboard)
    await state.clear()
    
@dp.message(StateFilter(States.rost),F.text)
async def rost(message:types.Message, state:FSMContext):
    await state.update_data(rost=message.text)
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å")
    await state.set_state(States.ves)

@dp.message(StateFilter(States.ves),F.text)
async def ves(message:types.Message, state:FSMContext):
    btnlist = [
                [types.KeyboardButton(text="–°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞")],
                [types.KeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")],
                [types.KeyboardButton(text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")],
                [types.KeyboardButton(text="–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏")],
                [types.KeyboardButton(text="–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")]
              ]
    keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
    await state.update_data(ves=message.text)
    await message.answer(text="–£–∫–∞–∂–∏—Ç–µ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",reply_markup=keyboard)
    await state.set_state(States.obraz_zhizny)

@dp.message(StateFilter(States.obraz_zhizny),F.text)
async def obraz_zhizny(message:types.Message, state:FSMContext):
    slovar = {
                "–°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞": 1.2,
                "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é": 1.375,
                "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é": 1.55,
                "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏": 1.7,
                "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": 1.9
             }
    cel = {
            "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã":1.15,
            "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":0.85,
            "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã":1
          }
    btnlist = [
                [types.KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
                types.KeyboardButton(text="–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")]
              ]
    keyboard = ReplyKeyboardMarkup(keyboard=btnlist, resize_keyboard=True)
    user_data = await state.get_data()
    pol = user_data["pol"]
    vozrast = user_data["vozrast"]
    rost = user_data["rost"]
    ves = user_data["ves"]
    n_b=user_data["naborpohud"]
    obraz_zhizny=message.text
    if pol == "–ú—É–∂—Å–∫–æ–π":
        result = 66.5 + (13.75 * int(ves)) + (5.003 * int(rost)) - (6.775 * int(vozrast))
        await message.answer(text=f"–ë–∞–∑–æ–≤–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö - {int(result*slovar[message.text]*cel[n_b])}", reply_markup=keyboard)
    if pol == "–ñ–µ–Ω—Å–∫–∏–π":
        result = 655.1 + (9.563 * int(ves)) + (1.85 * int(rost)) - (4.676 * int(vozrast))
        await message.answer(text=f"–ë–∞–∑–æ–≤–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–æ—Ä–∏—è—Ö - {int(result*slovar[message.text]*cel[n_b])}", reply_markup=keyboard)
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__=="__main__":
    asyncio.run(main())